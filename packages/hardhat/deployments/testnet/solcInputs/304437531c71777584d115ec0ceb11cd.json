{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/YourContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// Useful for debugging. Remove when deploying to a live network.\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Shopify is Ownable {\n\tuint256 private _storeIdCounter = 1;\n\tuint256 private _itemIdCounter = 1;\n\n\tstruct Store {\n\t\tuint256 id;\n\t\taddress owner;\n\t\tstring name;\n\t\tstring description;\n\t\tstring coverPhotoUrl;\n\t\tbool isActive;\n\t}\n\n\tstruct Item {\n\t\tuint256 id;\n\t\tuint256 storeId;\n\t\tstring name;\n\t\tuint256 price;\n\t\tstring photoUrl;\n\t\tstring description;\n\t\tuint256 inventory;\n\t\tbool isActive;\n\t}\n\n\tmapping(uint256 => Store) public stores;\n\tmapping(uint256 => Item) public items;\n\tmapping(address => uint256[]) public userStores;\n\tmapping(uint256 => uint256[]) public storeItems;\n\n\tevent StoreCreated(\n\t\tuint256 indexed storeId,\n\t\taddress indexed owner,\n\t\tstring name\n\t);\n\tevent StoreUpdated(\n\t\tuint256 indexed storeId,\n\t\tstring name,\n\t\tstring description,\n\t\tstring coverPhotoUrl\n\t);\n\tevent ItemCreated(\n\t\tuint256 indexed itemId,\n\t\tuint256 indexed storeId,\n\t\tstring name,\n\t\tuint256 price\n\t);\n\tevent ItemUpdated(\n\t\tuint256 indexed itemId,\n\t\tstring name,\n\t\tuint256 price,\n\t\tstring photoUrl,\n\t\tstring description,\n\t\tuint256 inventory\n\t);\n\tevent ItemPurchased(\n\t\tuint256 indexed itemId,\n\t\taddress indexed buyer,\n\t\tuint256 quantity\n\t);\n\n\tconstructor() Ownable(msg.sender) {}\n\n\tfunction createStore(\n\t\tstring memory _name,\n\t\tstring memory _description,\n\t\tstring memory _coverPhotoUrl\n\t) external {\n\t\trequire(bytes(_name).length > 0, \"Store name cannot be empty\");\n\n\t\tuint256 newStoreId = _storeIdCounter;\n\t\tstores[newStoreId] = Store(\n\t\t\tnewStoreId,\n\t\t\tmsg.sender,\n\t\t\t_name,\n\t\t\t_description,\n\t\t\t_coverPhotoUrl,\n\t\t\ttrue\n\t\t);\n\t\tuserStores[msg.sender].push(newStoreId);\n\n\t\temit StoreCreated(newStoreId, msg.sender, _name);\n\t\t_storeIdCounter++;\n\t}\n\n\tfunction createItem(\n\t\tuint256 _storeId,\n\t\tstring memory _name,\n\t\tuint256 _price,\n\t\tstring memory _photoUrl,\n\t\tstring memory _description,\n\t\tuint256 _inventory\n\t) external {\n\t\trequire(stores[_storeId].owner == msg.sender, \"Not the store owner\");\n\t\trequire(stores[_storeId].isActive, \"Store is not active\");\n\t\trequire(bytes(_name).length > 0, \"Item name cannot be empty\");\n\t\trequire(_price > 0, \"Price must be greater than zero\");\n\n\t\tuint256 newItemId = _itemIdCounter;\n\t\titems[newItemId] = Item(\n\t\t\tnewItemId,\n\t\t\t_storeId,\n\t\t\t_name,\n\t\t\t_price,\n\t\t\t_photoUrl,\n\t\t\t_description,\n\t\t\t_inventory,\n\t\t\ttrue\n\t\t);\n\t\tstoreItems[_storeId].push(newItemId);\n\n\t\temit ItemCreated(newItemId, _storeId, _name, _price);\n\t\t_itemIdCounter++;\n\t}\n\n\tfunction updateStore(\n\t\tuint256 _storeId,\n\t\tstring memory _name,\n\t\tstring memory _description,\n\t\tstring memory _coverPhotoUrl\n\t) external {\n\t\trequire(stores[_storeId].owner == msg.sender, \"Not the store owner\");\n\t\trequire(stores[_storeId].isActive, \"Store is not active\");\n\n\t\tStore storage store = stores[_storeId];\n\t\tstore.name = _name;\n\t\tstore.description = _description;\n\t\tstore.coverPhotoUrl = _coverPhotoUrl;\n\n\t\temit StoreUpdated(_storeId, _name, _description, _coverPhotoUrl);\n\t}\n\n\tfunction toggleStoreActive(uint256 _storeId) external {\n\t\trequire(stores[_storeId].owner == msg.sender, \"Not the store owner\");\n\t\tstores[_storeId].isActive = !stores[_storeId].isActive;\n\t}\n\n\tfunction updateItem(\n\t\tuint256 _itemId,\n\t\tstring memory _name,\n\t\tuint256 _price,\n\t\tstring memory _photoUrl,\n\t\tstring memory _description,\n\t\tuint256 _inventory\n\t) external {\n\t\trequire(\n\t\t\tstores[items[_itemId].storeId].owner == msg.sender,\n\t\t\t\"Not the store owner\"\n\t\t);\n\t\trequire(items[_itemId].isActive, \"Item is not active\");\n\n\t\tItem storage item = items[_itemId];\n\t\titem.name = _name;\n\t\titem.price = _price;\n\t\titem.photoUrl = _photoUrl;\n\t\titem.description = _description;\n\t\titem.inventory = _inventory;\n\n\t\temit ItemUpdated(\n\t\t\t_itemId,\n\t\t\t_name,\n\t\t\t_price,\n\t\t\t_photoUrl,\n\t\t\t_description,\n\t\t\t_inventory\n\t\t);\n\t}\n\n\tfunction purchaseItem(uint256 _itemId, uint256 _quantity) external payable {\n\t\tItem storage item = items[_itemId];\n\t\trequire(item.isActive, \"Item is not active\");\n\t\trequire(item.inventory >= _quantity, \"Not enough inventory\");\n\t\trequire(msg.value >= item.price * _quantity, \"Insufficient payment\");\n\n\t\titem.inventory -= _quantity;\n\t\taddress storeOwner = stores[item.storeId].owner;\n\n\t\t// Transfer funds to store owner\n\t\t(bool sent, ) = payable(storeOwner).call{ value: msg.value }(\"\");\n\t\trequire(sent, \"Failed to send Ether\");\n\n\t\temit ItemPurchased(_itemId, msg.sender, _quantity);\n\t}\n\n\tfunction toggleItemActive(uint256 _itemId) external {\n\t\trequire(\n\t\t\tstores[items[_itemId].storeId].owner == msg.sender,\n\t\t\t\"Not the store owner\"\n\t\t);\n\t\titems[_itemId].isActive = !items[_itemId].isActive;\n\t}\n\n\tfunction getStoresByOwner(\n\t\taddress _owner\n\t) external view returns (uint256[] memory) {\n\t\treturn userStores[_owner];\n\t}\n\n\tfunction getItemsByStore(\n\t\tuint256 _storeId\n\t) external view returns (uint256[] memory) {\n\t\treturn storeItems[_storeId];\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}